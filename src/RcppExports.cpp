// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dijkstra
std::vector<int> dijkstra(Rcpp::NumericMatrix edgeList, std::vector<int> weights, int numNodes, int startNode, bool isDirected);
RcppExport SEXP _Dijkstra_dijkstra(SEXP edgeListSEXP, SEXP weightsSEXP, SEXP numNodesSEXP, SEXP startNodeSEXP, SEXP isDirectedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type edgeList(edgeListSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type numNodes(numNodesSEXP);
    Rcpp::traits::input_parameter< int >::type startNode(startNodeSEXP);
    Rcpp::traits::input_parameter< bool >::type isDirected(isDirectedSEXP);
    rcpp_result_gen = Rcpp::wrap(dijkstra(edgeList, weights, numNodes, startNode, isDirected));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Dijkstra_dijkstra", (DL_FUNC) &_Dijkstra_dijkstra, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_Dijkstra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
